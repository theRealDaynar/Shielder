<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>player</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables 'n' What Not
vsp = 0;
hsp = 0;
movespeed = 4;

//*D added jump decay and time
jumpspeed = 14
lightjumpspeed = 7
grav = 0.6
image_speed = 0;
facing = 0;
counter = 0;

//*D added variable to control morter launch speed
morter_speed = 6 //min speed
charge_modifier = 6 //max speed = charge_modifier * morter_speed
max_charge_time = room_speed * 1.5 
cur_charge_time = 0

shield_width = 13
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>do nothing bra</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var bbl = x - sprite_xoffset
var bbt = y - sprite_yoffset
var bbr = bbl + sprite_width
var bbb = bbt + sprite_height
var shielddir = other.facing;
if keyboard_check(ord('W'))
    shielddir = 2
if (image_index = 8 or image_index = 9) and sprite_index = player
    shielddir = 3
var phspd = other.x - other.xprevious
var pvspd = other.y - other.yprevious
switch(shielddir)
{
    case 0:
    var sbbl = bbox_right - phspd
    var sbbt = bbt
    var sbbr = bbr
    var sbbb = bbb
    break;
    case 1:
    var sbbl = bbl
    var sbbt = bbt
    var sbbr = bbox_left - phspd
    var sbbb = bbb
    break;
    case 2:
    var sbbl = bbl
    var sbbt = bbt
    var sbbr = bbr
    var sbbb = bbox_top - pvspd
    break;
    case 3:
    var sbbl = bbl
    var sbbt = bbox_bottom - pvspd
    var sbbr = bbr
    var sbbb = bbb
    break;
}
with(objbulletParent)
{
    if point_in_rectangle(x,y,bbl,bbt,bbr,bbb)
    {
        var destroyed = false

        if point_in_rectangle(x,y,sbbl,sbbt,sbbr,sbbb)
            {
                destroyed = true
                event_user(0)
            }
            else
            {
        x = xprevious
        y = yprevious
        var tspd = speed
        
        while(tspd &gt; 0)
        {
            var s = min(1,tspd--);
            x+= dcos(direction) * s
            y-= dsin(direction) * s
            if point_in_rectangle(x,y,sbbl,sbbt,sbbr,sbbb)
            {
                destroyed = true
                event_user(0)
                break;
            }
        }
        }
        if !destroyed and point_in_rectangle(x,y,other.bbox_left,other.bbox_top,other.bbox_right,other.bbox_bottom)
        {
            if (shielddir = 0 and hspeed &lt; 0) or (shielddir = 1 and hspeed &gt; 0) or (shielddir = 2 and vspeed &gt; 0) or (shielddir = 3 and vspeed &lt; 0)
            {    destroyed = true
                event_user(0)
            }else
                room_restart()
        }
        if destroyed and vspeed &lt; 0 and shielddir = 3
            other.vsp -= other.jumpspeed
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get the player's input
//*D changed variables to local in order to optomise a bit
var key_right = keyboard_check(ord('D'));
var key_left = -keyboard_check(ord('A'));
var key_jump = keyboard_check(vk_space);

//React to inputs
move = key_left + key_right;
hsp = move * movespeed
if (vsp &lt; 10) vsp += grav;
if (place_meeting(x,y+1,objwall2))
{
    vsp = key_jump * -jumpspeed
       if key_jump
    {audio_play_sound_on(global.effects,jump,false,1)
    {repeat(3) instance_create(x+ random_range(-20, 16), y+28, objdustr); repeat(3) instance_create(x+ random_range(-16, 20), y+28, objdustl)}}
} else
if (place_meeting(x,y+1,objwall2)) and (keyboard_check(ord('S')))
{
    vsp = key_jump * -lightjumpspeed
    if key_jump
    {audio_play_sound_on(global.effects,jump,false,1)
    {repeat(3) instance_create(x+ random_range(-20, 16), y+28, objdustr); repeat(3) instance_create(x+ random_range(-16, 20), y+28, objdustl)}}
}

//Horizontal Collision
if (place_meeting(x+hsp,y,objwall2))
{
    while(!place_meeting(x+sign(hsp),y,objwall2))
    {
        x += sign(hsp);
    }
    hsp = 0;
}
x += hsp;

//Vertical Collision
if (place_meeting(x,y+vsp,objwall2))
{
    while(!place_meeting(x,y+sign(vsp),objwall2))
    {
        y += sign(vsp);
    }
    if vsp &gt; 0
    audio_play_sound_on(global.effects,landing,false,1);
    repeat(3) instance_create(x+ random_range(-20, 16), y+28 * sign(vsp), objdustr); 
    repeat(3) instance_create(x+ random_range(-16, 20), y+28 * sign(vsp), objdustl);
    vsp = 0;
}
y += vsp;

//Animations
image_speed = 0
if place_meeting(x,y+1,objwall2){
if (keyboard_check(ord('D'))) and (facing != 2) {facing = 0
if sprite_index != sPlayerRight and sprite_index != sPlayerRightUp
    image_index = 1
if keyboard_check(ord('W'))
sprite_index = sPlayerRightUp
else
sprite_index = sPlayerRight
image_speed = .2
if image_index = 1 {audio_play_sound_on(global.effects,footstep,0,0); repeat(2) instance_create(x+ random_range(-20, 16), y+28, objdust)}
}
else if (keyboard_check(ord('A'))) and (facing != 2) {facing = 1
if sprite_index != sPlayerLeft and sprite_index != sPlayerLeftUp
    image_index = 0
if keyboard_check(ord('W'))
sprite_index = sPlayerLeftUp
else
sprite_index = sPlayerLeft
image_speed = .2
if image_index = 1 {audio_play_sound_on(global.effects,footstep,0,0); repeat(2) instance_create(x, y+28, objdust)}
}
else
sprite_index = player
}
else
sprite_index = player
if (keyboard_check_released(ord('D'))) {facing = 0; counter = 0}
if (keyboard_check_released(ord('A'))) {facing = 1; counter = 0}
if keyboard_check(ord("A")) and keyboard_check(ord("D"))
{counter += 1}

if sprite_index = player{
if (facing = 0) {image_index = 0}
if (facing = 1) and (!keyboard_check(ord('D'))) {image_index = 1}

if keyboard_check(ord("A")) and !keyboard_check(ord("D"))
{
        image_index = 5
}
else if !keyboard_check(ord("A")) and keyboard_check(ord("D"))
{
        image_index = 4
}

if (counter &gt; room_speed * 1)
{image_index = 10}
if keyboard_check(ord('A')) facing = 1
if keyboard_check(ord("D")) facing = 0
if (keyboard_check(ord('W'))) and (facing = 0) and (facing != 2) {image_index = 2}
if (keyboard_check(ord('W'))) and (facing = 1) and (facing != 2) {image_index = 3}
if (keyboard_check(ord('D'))) and (keyboard_check(ord('W'))) and (facing != 2) {image_index = 6}
if (keyboard_check(ord('A'))) and (keyboard_check(ord('W'))) and (facing != 2) {image_index = 7}
if (!place_meeting(x,y+1,objwall2)) and (keyboard_check(ord('S'))) and (facing = 0) {image_index = 8}
if (!place_meeting(x,y+1,objwall2)) and (keyboard_check(ord('S'))) and (facing = 1) {image_index = 9}

if (keyboard_check(ord('S'))) and (facing = 0) and (place_meeting(x,y+1,objwall2)) {image_index = 11}
if (keyboard_check(ord('S'))) and (facing = 1) and (place_meeting(x,y+1,objwall2)) {image_index = 12}
}

//if (place_meeting(x,y+1,objwall2)) and (keyboard_check(ord('D'))) and (facing = 0) {instance_create(x-8,y+32,objdustl)}
//if (place_meeting(x,y+1,objwall2)) and (keyboard_check(ord('A'))) and (facing = 1) {instance_create(x+8,y+32,objdustr)}
if (place_meeting(x,y+1,objwall2)) and (keyboard_check(ord('D'))) and (keyboard_check(ord('A'))) {facing = 2}

if !keyboard_check(ord('W')) and !keyboard_check(ord('S'))
{if vsp &lt; 0 
    image_index = 13 + facing
else if vsp &gt; 0 or !place_meeting(x,y+1,objwall2)
    image_index = 15 + facing}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objdeathwall">
      <action>
        <libid>1</libid>
        <id>223</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_current_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="4" ename="objglow">
      <action>
        <libid>1</libid>
        <id>222</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_next_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="4" ename="objbulletParent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*//Daynar's added code
var shield_width = 3;
var block_threshhold = other.speed/4
if (image_index = 0) or (image_index = 4) or image_index = 11 //right
    if other.hspeed &lt; -block_threshhold//other.object_index = objbulletL
        with(other)
            event_user(0)
    else if collision_rectangle(bbox_right - shield_width,bbox_top,bbox_right,bbox_bottom,other.id,false,true)
        with(other)
            event_user(0)
    else
        room_restart()
else if (image_index = 1) or (image_index = 5) or image_index = 12 //left
    if other.hspeed &gt; block_threshhold//other.object_index = objbulletR
        with(other)
            event_user(0)
    else if collision_rectangle(bbox_left,bbox_top,bbox_left + shield_width,bbox_bottom,other.id,false,true)
        with(other)
            event_user(0)
    else
        room_restart()
else if (image_index = 2) or (image_index = 3) or (image_index = 6) or (image_index = 7) //top
    if other.vspeed &gt; block_threshhold//other.object_index = objbulletD
        with(other)
            event_user(0)
    else if collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top + shield_width,other.id,false,true)
        with(other)
            event_user(0)
    else
        room_restart()
else if (image_index = 8) or (image_index = 9)  //bottom
    if other.vspeed &lt; -block_threshhold//other.object_index = objbulletU
    {
        vsp -= 15
        with(other)
            event_user(0)
    }
    else if collision_rectangle(bbox_left,bbox_bottom - shield_width,bbox_right,bbox_bottom,other.id,false,true)
        with(other)
            event_user(0)
    else
        room_restart()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objwin">
      <action>
        <libid>1</libid>
        <id>222</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_next_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>223</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_current_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw charge bar
if cur_charge_time &gt; 0
    draw_healthbar(x-50,bbox_bottom+20,x+50,bbox_bottom+30,cur_charge_time / max_charge_time * 100,c_black,c_white,c_white,0,true,false) 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
